translation_unit [3 children] (start: 0:0, end: 11:0)
  preproc_include [2 children] (start: 0:0, end: 1:0)
    #include [0 children] (start: 0:0, end: 0:8)
    system_lib_string [0 children] (start: 0:9, end: 0:18)
  function_definition [3 children] (start: 2:0, end: 4:1)
    primitive_type [0 children] (start: 2:0, end: 2:3)
    function_declarator [2 children] (start: 2:4, end: 2:21)
      identifier [0 children] (start: 2:4, end: 2:7)
      parameter_list [5 children] (start: 2:7, end: 2:21)
        ( [0 children] (start: 2:7, end: 2:8)
        parameter_declaration [2 children] (start: 2:8, end: 2:13)
          primitive_type [0 children] (start: 2:8, end: 2:11)
          identifier [0 children] (start: 2:12, end: 2:13)
        , [0 children] (start: 2:13, end: 2:14)
        parameter_declaration [2 children] (start: 2:15, end: 2:20)
          primitive_type [0 children] (start: 2:15, end: 2:18)
          identifier [0 children] (start: 2:19, end: 2:20)
        ) [0 children] (start: 2:20, end: 2:21)
    compound_statement [3 children] (start: 2:22, end: 4:1)
      { [0 children] (start: 2:22, end: 2:23)
      return_statement [3 children] (start: 3:4, end: 3:17)
        return [0 children] (start: 3:4, end: 3:10)
        binary_expression [3 children] (start: 3:11, end: 3:16)
          identifier [0 children] (start: 3:11, end: 3:12)
          + [0 children] (start: 3:13, end: 3:14)
          identifier [0 children] (start: 3:15, end: 3:16)
        ; [0 children] (start: 3:16, end: 3:17)
      } [0 children] (start: 4:0, end: 4:1)
  function_definition [3 children] (start: 6:0, end: 10:1)
    primitive_type [0 children] (start: 6:0, end: 6:3)
    function_declarator [2 children] (start: 6:4, end: 6:10)
      identifier [0 children] (start: 6:4, end: 6:8)
      parameter_list [2 children] (start: 6:8, end: 6:10)
        ( [0 children] (start: 6:8, end: 6:9)
        ) [0 children] (start: 6:9, end: 6:10)
    compound_statement [5 children] (start: 6:11, end: 10:1)
      { [0 children] (start: 6:11, end: 6:12)
      declaration [3 children] (start: 7:4, end: 7:27)
        primitive_type [0 children] (start: 7:4, end: 7:7)
        init_declarator [3 children] (start: 7:8, end: 7:26)
          identifier [0 children] (start: 7:8, end: 7:14)
          = [0 children] (start: 7:15, end: 7:16)
          call_expression [2 children] (start: 7:17, end: 7:26)
            identifier [0 children] (start: 7:17, end: 7:20)
            argument_list [5 children] (start: 7:20, end: 7:26)
              ( [0 children] (start: 7:20, end: 7:21)
              number_literal [0 children] (start: 7:21, end: 7:22)
              , [0 children] (start: 7:22, end: 7:23)
              number_literal [0 children] (start: 7:24, end: 7:25)
              ) [0 children] (start: 7:25, end: 7:26)
        ; [0 children] (start: 7:26, end: 7:27)
      expression_statement [2 children] (start: 8:4, end: 8:35)
        call_expression [2 children] (start: 8:4, end: 8:34)
          identifier [0 children] (start: 8:4, end: 8:10)
          argument_list [5 children] (start: 8:10, end: 8:34)
            ( [0 children] (start: 8:10, end: 8:11)
            string_literal [4 children] (start: 8:11, end: 8:25)
              " [0 children] (start: 8:11, end: 8:12)
              string_content [0 children] (start: 8:12, end: 8:22)
              escape_sequence [0 children] (start: 8:22, end: 8:24)
              " [0 children] (start: 8:24, end: 8:25)
            , [0 children] (start: 8:25, end: 8:26)
            identifier [0 children] (start: 8:27, end: 8:33)
            ) [0 children] (start: 8:33, end: 8:34)
        ; [0 children] (start: 8:34, end: 8:35)
      return_statement [3 children] (start: 9:4, end: 9:13)
        return [0 children] (start: 9:4, end: 9:10)
        number_literal [0 children] (start: 9:11, end: 9:12)
        ; [0 children] (start: 9:12, end: 9:13)
      } [0 children] (start: 10:0, end: 10:1)
